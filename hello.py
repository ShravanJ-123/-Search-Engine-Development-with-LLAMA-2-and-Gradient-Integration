###Run in terminal 
#### Instalation
###pip install -q cassandra-driver;pip install -q cassio>=0.1.1;pip install -q gradientai --upgrade;pip install -q llama-index;pip install -q pypdf;pip install -q tiktoken==0.4.0;pip install python-dotenv;pip install cassandra-driver;pip install llama-index

import os
import json
#Set your access token and workspace ID
access_token = "rZTvcwNpQ8Gbbz9b2ARSbcHLulW85B4Y"
workspace_id = "a4d4274e-bc06-4838-afec-9e8b8780bdd7_workspace"

#Set the environment variables for your session
os.environ['GRADIENT_ACCESS_TOKEN'] = access_token
os.environ['GRADIENT_WORKSPACE_ID'] = workspace_id

print("Environment variables set successfully.")

#Imort cassandra & llama index
from cassandra.auth import PlainTextAuthProvider
from cassandra.cluster import Cluster
from llama_index import ServiceContext
from llama_index import set_global_service_context
from llama_index import VectorStoreIndex, SimpleDirectoryReader, StorageContext
from llama_index.embeddings import GradientEmbedding
from llama_index.llms import GradientBaseModelLLM
from llama_index.vector_stores import CassandraVectorStore
from copy import deepcopy
from tempfile import NamedTemporaryFile

from copy import deepcopy
from tempfile import NamedTemporaryFile

#Connect to VectorDB
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

# This secure connect bundle is autogenerated when you download your SCB,
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-temp-db.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("temp_db-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

row = session.execute("select release_version from system.local").one()
if row:
  print(row[0])
else:
  print("An error occurred.")

#Define the Gradient's Model Adapter for LLAMA-2
llm = GradientBaseModelLLM(
    base_model_slug="llama2-7b-chat",
    max_tokens =400,
)

#Configure Gradient embeddings
embed_model = GradientEmbedding(
    gradient_access_token = os.environ["GRADIENT_ACCESS_TOKEN"],
    gradient_workspace_id= os.environ["GRADIENT_WORKSPACE_ID"],
    gradient_model_slug="bge-large",
)

service_context = ServiceContext.from_defaults(
    llm = llm,
    embed_model= embed_model,
    chunk_size = 256,
)

set_global_service_context(service_context)

documents = SimpleDirectoryReader(r"C:\Users\DELL\Desktop\pdftoai").load_data()
print(f"Loaded{len(documents)}documents(s).")

# @title Setup and Ouery Index
index = VectorStoreIndex.from_documents(documents,
                                        service_context=service_context)
query_engine = index.as_query_engine()

while True:
    # Take user input for the query
    user_query = input("Enter your query (type 'end' to exit): ")

    # Check if the user wants to exit
    if user_query.lower() == 'end':
        print("Exiting the loop.")
        break

    # Perform the query
    response = query_engine.query(user_query)

    # Print or process the response
    print(response)
